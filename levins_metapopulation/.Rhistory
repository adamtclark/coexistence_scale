abline(v=c(log(p_pretty)), h=seq(0, -0.05, by=-0.01), col="grey")
matlines(log(p_subset), t(qmat), lty=c(2,1,2), col=1, type="l", axes=F)
axis(1, at=log(p_pretty), p_pretty, cex.axis=0.8)
axis(2, cex.axis=0.8, las=1)
box()
abline(h=0, v=log(1), lty=3)
dev.off()
error
rm(list=ls())
#set.seed(17112017)
niter<-1e6
nsteps<-2e4
frq<-0.5
m<-0.1
nmort<-m*niter
pslst<-1:niter
p_subset<-10^seq(-3, 0, length=20)
scalelst<-ceiling(p_subset*niter)
frqlst<-numeric(nsteps+1)
eigenmat<-matrix(nrow=nsteps, ncol=length(scalelst), data=NA)
for(i in 1:nsteps) {
if(i == 1) {
frqlst[i]<-frq
}
#randomly divide mortality among individuals
mtmp_1<-rbinom(1, nmort, frq) #number of type 1 individuals dying
#mtmp_0<-nmort-mtmp_1
#colonization
new_1<-rbinom(1, nmort, frq)
#new_0<-nmort-new_1
#new population
frq<-(frq*niter-mtmp_1+new_1)/niter
frqlst[i+1]<-frq
if(i/1e3 == floor(i/1e3)) {
print(i/nsteps)
}
#Calculate stabilities by scale...
for(j in 1:length(scalelst)) {
#### add 2% sp 0 by area to the mix
dpop<-round(0.02*scalelst[j]) #change in population
frq0_local<-rbinom(1, scalelst[j], frq)/scalelst[j]
if((1-frq)*scalelst[j]<=(scalelst[j]-dpop)) { #check that it is possible to add 2%
#add dpop individuals of 0 to global frquency
ftmp_dist_global<-(frq*niter-dpop)/niter
ftmp_dist_local<-(frq0_local*scalelst[j]-dpop)/scalelst[j]
#m individuals in disturbed population die, and are replaced based on ftmp_dist_global
ftmp_post_dist_local<-(ftmp_dist_local*(1-m)+ftmp_dist_global*m)
#calculate rate of change
d0<-abs(frq-ftmp_dist_local)
d1<-abs(frq-ftmp_post_dist_local)
eigenmat[i,j]<-log(d1/d0)
}
}
}
pdf("~/Dropbox/Projects/032_Coexistence_table/notes/rcode/neutral_system_by_scale_plot.pdf", colormodel = "cmyk", width=5, height=7)
par(mfrow=c(2,1), mar=c(4,4,1,1))
frqmat<-cbind(1-frqlst, frqlst)
matplot(0:nsteps, frqmat, type="l", col=1:2, lty=1, lwd=2, xlab="Time", ylab="Relative Abundance")
eigenmat_clean<-eigenmat
eigenmat_clean[is.infinite(eigenmat)]<-min(eigenmat[is.finite(eigenmat)])
qmat<-apply(eigenmat_clean, 2, function(x) quantile(x, c(0.025, 0.5, 0.975)))
#3par(mfrow=c(1,4))
#for(i in 1:4) {hist(eigenmat[,i])}
p_pretty<-c(0.001, 0.003, 0.01, 0.05, 0.25, 1)
matplot(log(p_subset), t(qmat), type="n", xlab="Spatial Scale (Fraction of Global)", ylab="Dominant Eigenvalue", axes=F)
abline(v=c(log(p_pretty)), h=seq(0, -0.05, by=-0.01), col="grey")
matlines(log(p_subset), t(qmat), lty=c(2,1,2), col=1, type="l", axes=F)
axis(1, at=log(p_pretty), p_pretty, cex.axis=0.8)
axis(2, cex.axis=0.8, las=1)
box()
abline(h=0, v=log(1), lty=3)
dev.off()
error
rm(list=ls())
#set.seed(17112017)
niter<-1e6
nsteps<-1e5
frq<-0.5
m<-0.1
nmort<-m*niter
pslst<-1:niter
p_subset<-10^seq(-3, 0, length=20)
scalelst<-ceiling(p_subset*niter)
frqlst<-numeric(nsteps+1)
eigenmat<-matrix(nrow=nsteps, ncol=length(scalelst), data=NA)
for(i in 1:nsteps) {
if(i == 1) {
frqlst[i]<-frq
}
#randomly divide mortality among individuals
mtmp_1<-rbinom(1, nmort, frq) #number of type 1 individuals dying
#mtmp_0<-nmort-mtmp_1
#colonization
new_1<-rbinom(1, nmort, frq)
#new_0<-nmort-new_1
#new population
frq<-(frq*niter-mtmp_1+new_1)/niter
frqlst[i+1]<-frq
if(i/1e3 == floor(i/1e3)) {
print(i/nsteps)
}
#Calculate stabilities by scale...
for(j in 1:length(scalelst)) {
#### add 2% sp 0 by area to the mix
dpop<-round(0.02*scalelst[j]) #change in population
frq0_local<-rbinom(1, scalelst[j], frq)/scalelst[j]
if((1-frq)*scalelst[j]<=(scalelst[j]-dpop)) { #check that it is possible to add 2%
#add dpop individuals of 0 to global frquency
ftmp_dist_global<-(frq*niter-dpop)/niter
ftmp_dist_local<-(frq0_local*scalelst[j]-dpop)/scalelst[j]
#m individuals in disturbed population die, and are replaced based on ftmp_dist_global
ftmp_post_dist_local<-(ftmp_dist_local*(1-m)+ftmp_dist_global*m)
#calculate rate of change
d0<-abs(frq-ftmp_dist_local)
d1<-abs(frq-ftmp_post_dist_local)
eigenmat[i,j]<-log(d1/d0)
}
}
}
pdf("~/Dropbox/Projects/032_Coexistence_table/notes/rcode/neutral_system_by_scale_plot.pdf", colormodel = "cmyk", width=5, height=7)
par(mfrow=c(2,1), mar=c(4,4,1,1))
frqmat<-cbind(1-frqlst, frqlst)
matplot(0:nsteps, frqmat, type="l", col=1:2, lty=1, lwd=2, xlab="Time", ylab="Relative Abundance")
eigenmat_clean<-eigenmat
eigenmat_clean[is.infinite(eigenmat)]<-min(eigenmat[is.finite(eigenmat)])
qmat<-apply(eigenmat_clean, 2, function(x) quantile(x, c(0.025, 0.5, 0.975)))
#3par(mfrow=c(1,4))
#for(i in 1:4) {hist(eigenmat[,i])}
p_pretty<-c(0.001, 0.003, 0.01, 0.05, 0.25, 1)
matplot(log(p_subset), t(qmat), type="n", xlab="Spatial Scale (Fraction of Global)", ylab="Dominant Eigenvalue", axes=F)
abline(v=c(log(p_pretty)), h=seq(0, -0.05, by=-0.01), col="grey")
matlines(log(p_subset), t(qmat), lty=c(2,1,2), col=1, type="l", axes=F)
axis(1, at=log(p_pretty), p_pretty, cex.axis=0.8)
axis(2, cex.axis=0.8, las=1)
box()
abline(h=0, v=log(1), lty=3)
dev.off()
error
rm(list=ls())
set.seed(17112017)
niter<-1e6
nsteps<-1e5
frq<-0.5
m<-0.1
nmort<-m*niter
pslst<-1:niter
p_subset<-10^seq(-3, 0, length=20)
scalelst<-ceiling(p_subset*niter)
frqlst<-numeric(nsteps+1)
eigenmat<-matrix(nrow=nsteps, ncol=length(scalelst), data=NA)
for(i in 1:nsteps) {
if(i == 1) {
frqlst[i]<-frq
}
#randomly divide mortality among individuals
mtmp_1<-rbinom(1, nmort, frq) #number of type 1 individuals dying
#mtmp_0<-nmort-mtmp_1
#colonization
new_1<-rbinom(1, nmort, frq)
#new_0<-nmort-new_1
#new population
frq<-(frq*niter-mtmp_1+new_1)/niter
frqlst[i+1]<-frq
if(i/1e3 == floor(i/1e3)) {
print(i/nsteps)
}
#Calculate stabilities by scale...
for(j in 1:length(scalelst)) {
#### add 2% sp 0 by area to the mix
dpop<-round(0.02*scalelst[j]) #change in population
frq0_local<-rbinom(1, scalelst[j], frq)/scalelst[j]
if((1-frq)*scalelst[j]<=(scalelst[j]-dpop)) { #check that it is possible to add 2%
#add dpop individuals of 0 to global frquency
ftmp_dist_global<-(frq*niter-dpop)/niter
ftmp_dist_local<-(frq0_local*scalelst[j]-dpop)/scalelst[j]
#m individuals in disturbed population die, and are replaced based on ftmp_dist_global
ftmp_post_dist_local<-(ftmp_dist_local*(1-m)+ftmp_dist_global*m)
#calculate rate of change
d0<-abs(frq-ftmp_dist_local)
d1<-abs(frq-ftmp_post_dist_local)
eigenmat[i,j]<-log(d1/d0)
}
}
}
pdf("~/Dropbox/Projects/032_Coexistence_table/notes/rcode/neutral_system_by_scale_plot.pdf", colormodel = "cmyk", width=5, height=7)
par(mfrow=c(2,1), mar=c(4,4,1,1))
frqmat<-cbind(1-frqlst, frqlst)
matplot(0:nsteps, frqmat, type="l", col=1:2, lty=1, lwd=2, xlab="Time", ylab="Relative Abundance")
eigenmat_clean<-eigenmat
eigenmat_clean[is.infinite(eigenmat)]<-min(eigenmat[is.finite(eigenmat)])
qmat<-apply(eigenmat_clean, 2, function(x) quantile(x, c(0.025, 0.5, 0.975)))
#3par(mfrow=c(1,4))
#for(i in 1:4) {hist(eigenmat[,i])}
p_pretty<-c(0.001, 0.003, 0.01, 0.05, 0.25, 1)
matplot(log(p_subset), t(qmat), type="n", xlab="Spatial Scale (Fraction of Global)", ylab="Dominant Eigenvalue", axes=F)
abline(v=c(log(p_pretty)), h=seq(0, -0.05, by=-0.01), col="grey")
matlines(log(p_subset), t(qmat), lty=c(2,1,2), col=1, type="l", axes=F)
axis(1, at=log(p_pretty), p_pretty, cex.axis=0.8)
axis(2, cex.axis=0.8, las=1)
box()
abline(h=0, v=log(1), lty=3)
dev.off()
pdf("~/Dropbox/Projects/032_Coexistence_table/notes/rcode/neutral_system_by_scale_plot.pdf", colormodel = "cmyk", width=5, height=7)
par(mfrow=c(2,1), mar=c(4,4,1,1))
frqmat<-cbind(1-frqlst, frqlst)
matplot(0:nsteps, frqmat, type="l", col=1:2, lty=1, lwd=2, xlab="Time", ylab="Relative Abundance")
eigenmat_clean<-eigenmat
eigenmat_clean[is.infinite(eigenmat)]<-min(eigenmat[is.finite(eigenmat)])
qmat<-apply(eigenmat_clean, 2, function(x) quantile(x, c(0.025, 0.5, 0.975)))
#3par(mfrow=c(1,4))
#for(i in 1:4) {hist(eigenmat[,i])}
p_pretty<-c(0.001, 0.003, 0.01, 0.05, 0.25, 1)
matplot(log(p_subset), t(qmat), type="n", xlab="Spatial Scale (Fraction of Global)", ylab="Dominant Eigenvalue", axes=F)
abline(v=c(log(p_pretty)), h=seq(0, -0.1, by=-0.01), col="grey")
matlines(log(p_subset), t(qmat), lty=c(2,1,2), col=1, type="l", axes=F)
axis(1, at=log(p_pretty), p_pretty, cex.axis=0.8)
axis(2, cex.axis=0.8, las=1)
box()
abline(h=0, v=log(1), lty=3)
dev.off()
pdf("~/Dropbox/Projects/032_Coexistence_table/notes/rcode/neutral_system_by_scale_plot.pdf", colormodel = "cmyk", width=5, height=7)
par(mfrow=c(2,1), mar=c(4,4,1,1))
frqmat<-cbind(1-frqlst, frqlst)
matplot(seq(0, nsteps, by=100), frqmat[seq(1, nsteps+1, by=100)], type="l", col=1:2, lty=1, lwd=2, xlab="Time", ylab="Relative Abundance")
eigenmat_clean<-eigenmat
eigenmat_clean[is.infinite(eigenmat)]<-min(eigenmat[is.finite(eigenmat)])
qmat<-apply(eigenmat_clean, 2, function(x) quantile(x, c(0.025, 0.5, 0.975)))
#3par(mfrow=c(1,4))
#for(i in 1:4) {hist(eigenmat[,i])}
p_pretty<-c(0.001, 0.003, 0.01, 0.05, 0.25, 1)
matplot(log(p_subset), t(qmat), type="n", xlab="Spatial Scale (Fraction of Global)", ylab="Dominant Eigenvalue", axes=F)
abline(v=c(log(p_pretty)), h=seq(0, -0.1, by=-0.01), col="grey")
matlines(log(p_subset), t(qmat), lty=c(2,1,2), col=1, type="l", axes=F)
axis(1, at=log(p_pretty), p_pretty, cex.axis=0.8)
axis(2, cex.axis=0.8, las=1)
box()
abline(h=0, v=log(1), lty=3)
dev.off()
pdf("~/Dropbox/Projects/032_Coexistence_table/notes/rcode/neutral_system_by_scale_plot.pdf", colormodel = "cmyk", width=5, height=7)
par(mfrow=c(2,1), mar=c(4,4,1,1))
frqmat<-cbind(1-frqlst, frqlst)
matplot(seq(0, nsteps, by=100), frqmat[seq(1, nsteps+1, by=100),], type="l", col=1:2, lty=1, lwd=2, xlab="Time", ylab="Relative Abundance")
eigenmat_clean<-eigenmat
eigenmat_clean[is.infinite(eigenmat)]<-min(eigenmat[is.finite(eigenmat)])
qmat<-apply(eigenmat_clean, 2, function(x) quantile(x, c(0.025, 0.5, 0.975)))
#3par(mfrow=c(1,4))
#for(i in 1:4) {hist(eigenmat[,i])}
p_pretty<-c(0.001, 0.003, 0.01, 0.05, 0.25, 1)
matplot(log(p_subset), t(qmat), type="n", xlab="Spatial Scale (Fraction of Global)", ylab="Dominant Eigenvalue", axes=F)
abline(v=c(log(p_pretty)), h=seq(0, -0.1, by=-0.01), col="grey")
matlines(log(p_subset), t(qmat), lty=c(2,1,2), col=1, type="l", axes=F)
axis(1, at=log(p_pretty), p_pretty, cex.axis=0.8)
axis(2, cex.axis=0.8, las=1)
box()
abline(h=0, v=log(1), lty=3)
dev.off()
par(mfrow=c(2,1), mar=c(4,4,1,1))
frqmat<-cbind(1-frqlst, frqlst)
matplot(seq(0, nsteps, by=100), frqmat[seq(1, nsteps+1, by=100),], type="l", col=1:2, lty=1, lwd=2, xlab="Time", ylab="Relative Abundance", main="Hubbell's Neutral Model")
eigenmat_clean<-eigenmat
eigenmat_clean[is.infinite(eigenmat)]<-min(eigenmat[is.finite(eigenmat)])
qmat<-apply(eigenmat_clean, 2, function(x) quantile(x, c(0.025, 0.5, 0.975)))
#3par(mfrow=c(1,4))
#for(i in 1:4) {hist(eigenmat[,i])}
p_pretty<-c(0.001, 0.003, 0.01, 0.05, 0.25, 1)
matplot(log(p_subset), t(qmat), type="n", xlab="Spatial Scale (Fraction of Global)", ylab="Dominant Eigenvalue", axes=F)
abline(v=c(log(p_pretty)), h=seq(0, -0.1, by=-0.01), col="grey")
matlines(log(p_subset), t(qmat), lty=c(2,1,2), col=1, type="l", axes=F)
axis(1, at=log(p_pretty), p_pretty, cex.axis=0.8)
axis(2, cex.axis=0.8, las=1)
box()
abline(h=0, v=log(1), lty=3)
dev.off()
pdf("~/Dropbox/Projects/032_Coexistence_table/notes/rcode/neutral_system_by_scale_plot.pdf", colormodel = "cmyk", width=5, height=7)
par(mfrow=c(2,1), mar=c(4,4,1,1))
frqmat<-cbind(1-frqlst, frqlst)
matplot(seq(0, nsteps, by=100), frqmat[seq(1, nsteps+1, by=100),], type="l", col=1:2, lty=1, lwd=2, xlab="Time", ylab="Relative Abundance", main="Hubbell's Neutral Model")
eigenmat_clean<-eigenmat
eigenmat_clean[is.infinite(eigenmat)]<-min(eigenmat[is.finite(eigenmat)])
qmat<-apply(eigenmat_clean, 2, function(x) quantile(x, c(0.025, 0.5, 0.975)))
#3par(mfrow=c(1,4))
#for(i in 1:4) {hist(eigenmat[,i])}
p_pretty<-c(0.001, 0.003, 0.01, 0.05, 0.25, 1)
matplot(log(p_subset), t(qmat), type="n", xlab="Spatial Scale (Fraction of Global)", ylab="Dominant Eigenvalue", axes=F)
abline(v=c(log(p_pretty)), h=seq(0, -0.1, by=-0.01), col="grey")
matlines(log(p_subset), t(qmat), lty=c(2,1,2), col=1, type="l", axes=F)
axis(1, at=log(p_pretty), p_pretty, cex.axis=0.8)
axis(2, cex.axis=0.8, las=1)
box()
abline(h=0, v=log(1), lty=3)
dev.off()
require(deSolve)
LVmod <- function(t, x, parms, input)  {
with(as.list(c(parms, x)), {
import <- input(t)
dN1 <- (1 - 0.1*N2 - N1 - N1*import*10)*N1
dN2 <- (1 - 2*N2 - N1)*N2
res <- c(dN1, dN2)
list(res)
})
}
## The parameters
parms <- c()
## vector of timesteps
times <- seq(0, 50, by=0.1)
## external signal with rectangle impulse
signal <- data.frame(times = times,
import = rep(0, length(times)))
signal$import[signal$times/5 == floor(signal$times/5)] <- 1
sigimp <- approxfun(signal$times, signal$import, rule = 2)
## Start values for steady state
xstart <- c(N1=0.5, N2=0.5)
## Solve model
out <- ode(y = xstart, times = times,
func = LVmod, parms = parms, input = sigimp)
## Default plot method
matplot(out[,1], out[,-1], type="l", lty=1, lwd=2, col=1:2, xlab="time", ylab="N", ylim=c(0, 1))
abline(h=0, lty=3)
source('~/Dropbox/Projects/032_Coexistence_mechanisms/src/levins_metapopulation/stability_by_scale.R', echo=TRUE)
error
rm(list=ls())
setwd("~/Dropbox/Projects/032_Coexistence_mechanisms/src/levins_metapopulation/")
#load functions
source("run_metapopulation_wrapper.R")
gridout<-makegrid(xlng = 100, ylng = 100)
#population<-populate(gridout, clst = c(0.15, 0.3, 0.8, 3, 15), radlst = Inf)
population<-populate(gridout, clst = c(0.15, 0.3), radlst = 20)
getceq(population)
out<-run_metapopulation(tmax=500, nsteps = 1000, gridout, population, talktime = 10)
plot_metapop(out)
plot_map(out, gridout)
out1<-out
population1<-rewrap_pop(out1, population)
out1<-run_metapopulation(tmax=500, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
out1$plotdata$ceq
plot_metapop(out1)
output<-out1
out<-output$out
ceq<-output$plotdata$ceq
ngrid<-output$plotdata$ngrid
matplot(out[,1], out[,-1]/ngrid, type="l", xlab="time", ylab="p",
lty=1, col=1:ncol(out), lwd=2)
abline(h=ceq,
lty=2, col=1:ncol(out), lwd=2)
ceq
plot_metapop<-function(output) {
out<-output$out
ceq<-output$plotdata$ceq
ngrid<-output$plotdata$ngrid
matplot(out[,1], out[,-1]/ngrid, type="l", xlab="time", ylab="p",
lty=1, col=1:ncol(out), lwd=2, ylim=c(0,1))
abline(h=ceq,
lty=2, col=1:ncol(out), lwd=2)
}
plot_metapop(out1)
plot_metapop<-function(output) {
out<-output$out
ceq<-output$plotdata$ceq
ngrid<-output$plotdata$ngrid
matplot(out[,1], out[,-1]/ngrid, type="l", xlab="time", ylab="p",
lty=1, col=1:ncol(out), lwd=2, ylim=c(0,1))
abline(h=c(0,1), lty=3)
abline(h=ceq,
lty=2, col=1:ncol(out), lwd=2)
}
plot_metapop(out1)
gridout<-makegrid(xlng = 100, ylng = 100)
#population<-populate(gridout, clst = c(0.15, 0.3, 0.8, 3, 15), radlst = Inf)
population<-populate(gridout, clst = c(0.15, 0.3), radlst = 50)
getceq(population)
out<-run_metapopulation(tmax=500, nsteps = 1000, gridout, population, talktime = 10)
plot_metapop(out)
plot_map(out, gridout)
out1<-out
population1<-rewrap_pop(out1, population)
out1<-run_metapopulation(tmax=500, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
plot_metapop(out1)
population<-populate(gridout, clst = c(0.15, 0.3), radlst = 100)
getceq(population)
out<-run_metapopulation(tmax=500, nsteps = 1000, gridout, population, talktime = 10)
plot_metapop(out)
plot_map(out, gridout)
out1<-out
population1<-rewrap_pop(out1, population)
out1<-run_metapopulation(tmax=500, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
plot_metapop(out1)
#population<-populate(gridout, clst = c(0.15, 0.3, 0.8, 3, 15), radlst = Inf)
population<-populate(gridout, clst = c(0.15, 0.3), radlst = Inf)
getceq(population)
out<-run_metapopulation(tmax=500, nsteps = 1000, gridout, population, talktime = 10)
plot_metapop(out)
plot_map(out, gridout)
out1<-out
population1<-rewrap_pop(out1, population)
out1<-run_metapopulation(tmax=500, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
plot_metapop(out1)
plot_map(out1, gridout)
population<-populate(gridout, clst = c(0.15, 0.3), radlst = 2)
getceq(population)
out<-run_metapopulation(tmax=500, nsteps = 1000, gridout, population, talktime = 10)
plot_metapop(out)
plot_map(out, gridout)
out1<-out
population1<-rewrap_pop(out1, population)
out1<-run_metapopulation(tmax=500, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.1, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.01, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.01, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.01, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.01, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.001, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.001, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.001, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.001, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.001, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=0.001, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
out1<-run_metapopulation(tmax=100, nsteps = 100, gridout, population1, talktime = 0)
plot_metapop(out1)
plot_map(out1, gridout)
